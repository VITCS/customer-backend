################################################
# Parameters
################################################
Parameters:
  Application:
    Type: String
  Module:
    Type: String
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 1
    Description: CloudWatch Logs retention period for Lambda functions
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: EventBridge Event Bus Name
  NodeLayerArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Node Layer NodeDependenciesLayer ARN
  QueryLimit:
    Type: Number
    Default: 20
    Description: Maximum number of items to return from a single query
  ApiId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: API Id
  SearchItem:
    Type: String
    Description: Search Item i.e. Table to search
    Default: ${Appplication}-${Environment}-CustomerProfile
##############################################################
# Data Sources for CustomerPayment
##############################################################
Resources:
  ##########################
  # Customer Contact #
  ##########################
  GetCustomerContactResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: CustomerContactTable
      FieldName: customerContact
      TypeName: CustomerProfile
      RequestMappingTemplate: |
        #if( $util.isNull($ctx.source.userId) )
          #return
        #else
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
              ## Provide a query expression. **
              "expression": "userId = :userId",
              "expressionValues" : {
                  ":userId" : $util.dynamodb.toDynamoDBJson($ctx.source.userId)
              }
          },
          "index": "byCustomerProfileId",
          "select": "ALL_ATTRIBUTES"
        }
        #end
      ResponseMappingTemplate: |
        #if( $ctx.error )
        $util.error($ctx.error.message, $ctx.error.type)
        #else
        $util.toJson($ctx.result)
        #end

  ##########################
  # Delivery To Address #
  ##########################
  GetDeliveryToAddressResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: CustomerAddressTable
      FieldName: deliveryToAddress
      TypeName: CustomerProfile
      RequestMappingTemplate: |
        #if( $util.isNull($ctx.source.userId) )
          #return
        #else
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
              "id": $util.dynamodb.toDynamoDBJson($ctx.source.deliveryToId),
            }
        }
        #end
      ResponseMappingTemplate: |
        #if( $ctx.error )
        $util.error($ctx.error.message, $ctx.error.type)
        #else
        $util.toJson($ctx.result)
        #end

  ##########################
  # Create User Social Login #
  ##########################
  CreateUserSocialLogin:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: ManageCustomerProfile
      FieldName: createUserSocial
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "createUserSocial",
            "body": $util.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  ##########################
  # Create User West #
  ##########################
  CreateUserWest:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: ManageCustomerProfile
      FieldName: createUserWest
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "createUserWest",
            "body": $util.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  ##########################
  # Update User West #
  ##########################
  UpdateUserWest:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: ManageCustomerProfile
      FieldName: updateUserWest
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "updateUserWest",
            "body": $util.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  ##########################
  # S3 Signed URL #
  ##########################
  S3SignedURLResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: SignedURLDataSource
      FieldName: getS3SignedURL
      TypeName: Query
      RequestMappingTemplate: |
        {
         "version" : "2018-05-29",
         "operation": "Invoke",
         "payload": {
           "user": $util.toJson($context.identity.claims),
           "body": $util.toJson($context.arguments)
           }
         }

      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  ##########################
  # Delete Photo Resolver #
  ##########################
  DeletePhotoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: DeletePhotoDataSource
      FieldName: deletePhoto
      TypeName: Mutation
      RequestMappingTemplate: |
        {
         "version": "2018-05-29",
           "operation": "Invoke",
           "payload": {
             "user": $util.toJson($context.identity.claims.get("cognito:username")),
             "body": $util.toJson($context.arguments)
           }
         }

      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)
